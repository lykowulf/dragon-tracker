@model IEnumerable<TestTracker2020.Models.Ticket>
@using Microsoft.AspNetCore.Identity
@using TestTracker2020.Services
@inject UserManager<BTUser> UserManager
@inject IBTAccessService AccessService




@{ ViewData["Title"] = "Home Page";
    var userId = UserManager.GetUserId(User);
    var roleName = (await UserManager.GetRolesAsync(await UserManager.GetUserAsync(User))).FirstOrDefault();
}
<head>

<link href="~/Custom CSS/simplestyle.css" rel="stylesheet" />
</head>

@*Graph for ticket priorities*@
<body class="background">
    <div>
        <!--Chart Priority-->
        <div class="row ml-1 mr-1 mt-5" id="charts">
            <div class="col">
                <div class="card widget-content widget-content-area br-6">
                    <!-- /.card-header -->
                    <div class="card-body">
                        <div class="row">
                            <div class="col-4">
                                <p class="text-center">
                                    <strong>Tickets By Type</strong>
                                </p>

                                <div class="chart">
                                    <canvas id="typeChart" height="250" style="height: 250px;"></canvas>
                                </div>
                                <!-- /.chart-responsive -->
                            </div>
                            <!-- /.col -->
                            <div class="col-4">
                                <p class="text-center">
                                    <strong>Tickets By Priority</strong>
                                </p>

                                <div class="chart">
                                    <canvas id="priorityChart" height="250" style="height: 250px;"></canvas>
                                </div>
                                <!-- /.chart-responsive -->
                            </div>
                            <!-- /.col -->
                            <div class="col-4">
                                <p class="text-center">
                                    <strong>Tickets By Status</strong>
                                </p>

                                <div class="chart">
                                    <canvas id="statusChart" height="250" style="height: 250px;"></canvas>
                                </div>
                                <!-- /.chart-responsive -->
                            </div>
                            <!-- /.col -->
                        </div>
                        <!-- /.row -->
                    </div>
                    <!-- ./card-body -->
                </div>
            </div>
        </div>
        @*Table*@


        <div class="layout-px-spacing">

            <div class="row layout-top-spacing">
                <div class="col-xl-12 col-lg-12 col-sm-12  layout-spacing">
                    <div class="widget-content widget-content-area br-6">
                        <div class="widget-heading">
                            <h1 class="text-lg-center">Recent Tickets</h1>
                        </div>
                        <div class="table-responsive mb-4 mt-4">
                            <table id="zero-config" class="table table-hover" style="width:100%">
                                <thead>
                                    <tr>
                                        <th>
                                            @Html.DisplayNameFor(model => model.Title)
                                        </th>
                                        <th>
                                            @Html.DisplayNameFor(model => model.Description)
                                        </th>
                                        <th>
                                            @Html.DisplayNameFor(model => model.Created)
                                        </th>
                                        <th>
                                            @Html.DisplayNameFor(model => model.Updated)
                                        </th>
                                        <th>
                                            @Html.DisplayNameFor(model => model.Project)
                                        </th>
                                        <th>
                                            @Html.DisplayNameFor(model => model.TicketType)
                                        </th>
                                        <th>
                                            @Html.DisplayNameFor(model => model.TicketPriority)
                                        </th>
                                        <th>
                                            @Html.DisplayNameFor(model => model.TicketStatus)
                                        </th>
                                        <th>
                                            @Html.DisplayNameFor(model => model.OwnerUser)
                                        </th>
                                        <th>
                                            @Html.DisplayNameFor(model => model.DeveloperUser)
                                        </th>

                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in Model)
                                    {
                                        <tr>
                                            <td>
                                                @Html.DisplayFor(modelItem => item.Title)
                                            </td>
                                            <td>
                                                @Html.DisplayFor(modelItem => item.Description)
                                            </td>
                                            <td>
                                                @Html.DisplayFor(modelItem => item.Created)
                                            </td>
                                            <td>
                                                @Html.DisplayFor(modelItem => item.Updated)
                                            </td>
                                            <td>
                                                @Html.DisplayFor(modelItem => item.Project.Name)
                                            </td>
                                            <td>
                                                @Html.DisplayFor(modelItem => item.TicketType.Name)
                                            </td>
                                            <td>
                                                @Html.DisplayFor(modelItem => item.TicketPriority.Name)
                                            </td>
                                            <td>
                                                @Html.DisplayFor(modelItem => item.TicketStatus.Name)
                                            </td>
                                            <td>
                                                @Html.DisplayFor(modelItem => item.OwnerUser.FullName)
                                            </td>
                                            <td>
                                                @Html.DisplayFor(modelItem => item.DeveloperUser.FullName)
                                            </td>

                                        </tr>
                                    }

                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>

            </div>
        </div>
    </div>











    @*Scripts*@


    @section Scripts{




        <script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.1.0/raphael-min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/morris.js/0.5.1/morris.min.js"></script>





        <script>
        //Step 1 - Construct the URL needed to request the data
        var Url1 = '@Url.Action("TypeChart", "Charts")'; // represent the endpoint
        var Url2 = '@Url.Action("PriorityChart", "Charts")'; // represent the endpoint
        var Url3 = '@Url.Action("StatusChart", "Charts")'; // represent the endpoint

        //Step 2 - start the structure for our AJAX call
        $.post(Url1).then(function (response) {
            // Get context with jQuery - using jQuery's .get() method.
            var typeChartCanvas = $('#typeChart').get(0).getContext('2d')
            var donutData = {
                labels: response.labels,
                datasets: [
                    {
                        data: response.data,
                        backgroundColor: response.backgroundColor,
                    }
                ]
            }
            var donutOptions = {
                maintainAspectRatio: false,
                responsive: true,
            }
            //Create pie or douhnut chart
            // You can switch between pie and douhnut using the method below.
            var donutChart = new Chart(typeChartCanvas, {
                type: 'pie',
                data: donutData,
                options: donutOptions
            })
        });
        $.post(Url2).then(function (response) {
            // Get context with jQuery - using jQuery's .get() method.
            var priorityChartCanvas = $('#priorityChart').get(0).getContext('2d')
            var donutData = {
                labels: response.labels,
                datasets: [
                    {
                        data: response.data,
                        backgroundColor: response.backgroundColor,
                    }
                ]
            }
            var donutOptions = {
                maintainAspectRatio: false,
                responsive: true,
            }
            //Create pie or douhnut chart
            // You can switch between pie and douhnut using the method below.
            var donutChart = new Chart(priorityChartCanvas, {
                type: 'doughnut',
                data: donutData,
                options: donutOptions
            })
        });
        $.post(Url3).then(function (response) {
            // Get context with jQuery - using jQuery's .get() method.
            var statusChartCanvas = $('#statusChart').get(0).getContext('2d')
            var donutData = {
                labels: response.labels,
                datasets: [
                    {
                        data: response.data,
                        backgroundColor: response.backgroundColor,
                    }
                ]
            }
            var donutOptions = {
                maintainAspectRatio: false,
                responsive: true,
            }
            //Create pie or douhnut chart
            // You can switch between pie and douhnut using the method below.
            var donutChart = new Chart(statusChartCanvas, {
                type: 'pie',
                data: donutData,
                options: donutOptions
            })
        });
        </script>











        <script src="~/Template/plugins/table/datatable/datatables.js"></script>
        <script>
            $('#zero-config').DataTable({
                "oLanguage": {
                    "oPaginate": { "sPrevious": '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-arrow-left"><line x1="19" y1="12" x2="5" y2="12"></line><polyline points="12 19 5 12 12 5"></polyline></svg>', "sNext": '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-arrow-right"><line x1="5" y1="12" x2="19" y2="12"></line><polyline points="12 5 19 12 12 19"></polyline></svg>' },
                    "sInfo": "Showing page _PAGE_ of _PAGES_",
                    "sSearch": '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-search"><circle cx="11" cy="11" r="8"></circle><line x1="21" y1="21" x2="16.65" y2="16.65"></line></svg>',
                    "sSearchPlaceholder": "Search...",
                    "sLengthMenu": "Results :  _MENU_",
                },
                "stripeClasses": [],
                "lengthMenu": [7, 10, 20, 50],
                "pageLength": 7
            });
        </script>




    }
</body>